{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red63\green63\blue63;\red255\green255\blue255;\red63\green63\blue63;
\red255\green255\blue255;\red244\green244\blue244;\red197\green41\blue61;\red0\green0\blue0;\red0\green0\blue194;
\red251\green0\blue7;\red15\green112\blue1;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c31373\c31373\c31373;\cssrgb\c100000\c100000\c100000;\cssrgb\c31373\c31373\c31373;
\cssrgb\c100000\c100000\c100000;\cssrgb\c96471\c96471\c96471;\cssrgb\c82353\c24706\c30196;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c80392;
\cssrgb\c100000\c0\c0;\cssrgb\c0\c50196\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16560\viewh19580\viewkind0
\deftab720
\pard\pardeftab720\sl420\sa270\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/"}}{\fldrslt 
\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
http://www.w3schools.com/js/js_strict.asp\
}}
\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
0. Remove \'93use strict\'94 before adding bugs\
\cf4 \cb5 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl420\sa270\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://tutorialzine.com/2014/04/10-mistakes-javascript-beginners-make/"}}{\fldrslt 
\b0 \cf4 http://tutorialzine.com/2014/04/10-mistakes-javascript-beginners-make/}}
\b0 \

\b 1. Missing curly braces\
\pard\pardeftab720\sl300\sa390\partightenfactor0

\b0 \cf4 One practice, which JavaScript beginners are often guilty of, is omitting curly braces after statements like \cb6 if\cb5 , \cb6 else\cb5 , \cb6 while\cb5  and \cb6 for\cb5 . \
\pard\pardeftab720\sl420\sa270\partightenfactor0

\b \cf4 2. Missing semicolons\
\pard\pardeftab720\sl300\sa390\partightenfactor0

\b0 \cf4 When JavaScript is parsed, there is a process known as automatic semicolon insertion. However, you should always include semicolons, because there are {\field{\*\fldinst{HYPERLINK "http://cjihrig.com/blog/the-dangers-of-javascripts-automatic-semicolon-insertion/"}}{\fldrslt \cf7 \ul \ulc7 \strokec7 dangers in omitting them}}.\
\pard\pardeftab720\sl420\sa270\partightenfactor0

\b \cf4 3. Not understanding type coercion\
\pard\pardeftab720\sl300\sa390\partightenfactor0

\b0 \cf4 JavaScript is dynamically typed. Depending on how you use a variable, the runtime might decide that it should be converted in one type or another. This is known as {\field{\*\fldinst{HYPERLINK "http://webreflection.blogspot.com/2010/10/javascript-coercion-demystified.html"}}{\fldrslt \cf7 \ul \ulc7 \strokec7 type coercion}}. To prevent types from being implicitly converted when comparing variables in \cb6 if\cb5  statements, you can use {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons"}}{\fldrslt \cf7 \ul \ulc7 \strokec7 strict equality checks}} (===).\
\pard\pardeftab720\sl420\sa270\partightenfactor0

\b \cf4 4. Forgetting var\
\pard\pardeftab720\sl300\sa390\partightenfactor0

\b0 \cf4 Another practice that beginners are guilty of, is forgetting to use the \cb6 var\cb5  keyword when declaring variables. JavaScript is very permissive, and the first time it sees that you\'92ve used a variable without the \cb6 var\cb5  statement, it will silently declare it for you globally. This can be the source of subtle bugs.\
\pard\pardeftab720\sl420\sa270\partightenfactor0

\b \cf4 5. Arithmetic operations with floats\
\pard\pardeftab720\sl300\sa390\partightenfactor0

\b0 \cf4 This mistake is true for nearly every programming language out there, including JavaScript. Due to the way {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/588004/is-floating-point-math-broken"}}{\fldrslt \cf7 \ul \ulc7 \strokec7 floating point numbers are represented in memory}}, arithmetic operations are not as precise as you\'92d think. To work around this problem, you should not use use decimals if you need absolute correctness.\
\
{\field{\*\fldinst{HYPERLINK "http://www.w3schools.com/js/js_mistakes.asp"}}{\fldrslt http://www.w3schools.com/js/js_mistakes.asp}}\

\b 6. Use assignment operator (=) instead of comparison operator (==)\
7. Forget the difference of strict comparison (===) and comparison (==)\
8. Confusing addition and concatenation\

\b0 In JavaScript both operations use the same + operator\

\b 9. Breaking a JavaScript String
\b0 \cf8 \strokec8 \
\pard\pardeftab720\sl360\sa300\partightenfactor0
\cf8 JavaScript will allow you to break a statement into two lines, but breaking a statement in the middle of a string will not work.\
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b \cf8 10. Misplacing semicolon\
\pard\pardeftab720\sl380\partightenfactor0

\b0 \cf9 \strokec9 if\cf8 \strokec8  (x == \cf10 \strokec10 19\cf8 \strokec8 );\
\{\
\'a0\'a0\'a0 \cf11 \strokec11 // code block\'a0 \cb1 \
\cf8 \cb5 \strokec8 \}\

\b \
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b0 \cf8 Because of of a misplaced semicolon, the code block after this will always be executed.\
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b \cf8 11. Undefined is NOT Null\
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b0 \cf8 With JavaScript, 
\b null
\b0  is for objects, 
\b undefined
\b0  is for variables, properties, and methods.\
To be null, an object has to be defined, otherwise it will be undefined.\
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b \cf8 12. Expecting a block level scope\
\pard\pardeftab720\sl360\sa300\partightenfactor0

\b0 \cf8 JavaScript 
\b does not
\b0  create a new scope for each code block.\
\pard\pardeftab720\sl360\sa300\partightenfactor0
\cf8 \
\
}