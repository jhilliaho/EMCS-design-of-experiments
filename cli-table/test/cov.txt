# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\index.test.js: line 26, column -245-7, -245-7, -245-7, -245-7, -245-7

      var table = new Table({
          head: ['Rel', 'Change', 'By', 'When']
        , style: {
              'padding-left': 1
            , 'padding-right': 1
            , head: []
            , border: []
          }
        , colWidths: [6, 21, 25, 17]
      }); var table = new Table({
          head: ['Cool'],
          style: {
            head: [],
            border: []
          }
      }); var table = new Table({
        head: ['Rel', 'By'],
        style: {head: ['red'], border: ['grey']}
      }); var table = new Table({
        chars: {
            'top': '═'
          , 'top-mid': '╤'
          , 'top-left': '╔'
          , 'top-right': '╗'
          , 'bottom': '═'
          , 'bottom-mid': '╧'
          , 'bottom-left': '╚'
          , 'bottom-right': '╝'
          , 'left': '║'
          , 'left-mid': '╟'
          , 'right': '║'
          , 'right-mid': '╢'
        },
        style: {
            head: []
          , border: []
        }
      }); var table = new Table({
        chars: {
            'top': ''
          , 'top-mid': ''
          , 'top-left': ''
          , 'top-right': ''
          , 'bottom': ''
          , 'bottom-mid': ''
          , 'bottom-left': ''
          , 'bottom-right': ''
          , 'left': ''
          , 'left-mid': ''
          , 'mid': ''
          , 'mid-mid': ''
          , 'right': ''
          , 'right-mid': ''
          , 'middle': ' ' // a single space
        },
        style: {
            head: []
          , border: []
          , 'padding-left': 0
          , 'padding-right': 0
        }
      });
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\index.test.js: line 41, column -619-6, -619-6, -619-6, -619-6, -619-6, -619-6, -619-6, -619-6

      var expected = [
          '┌──────┬─────────────────────┬─────────────────────────┬─────────────────┐'
        , '│ Rel  │ Change              │ By                      │ When            │'
        , '├──────┼─────────────────────┼─────────────────────────┼─────────────────┤'
        , '│ v0.1 │ Testing something … │ rauchg@gmail.com        │ 7 minutes ago   │'
        , '├──────┼─────────────────────┼─────────────────────────┼─────────────────┤'
        , '│ v0.1 │ Testing something … │ rauchg@gmail.com        │ 8 minutes ago   │'
        , '└──────┴─────────────────────┴─────────────────────────┴─────────────────┘'
      ]; var expected = [
          '┌────┬──────────────────────┐'
        , '│v0.1│Testing something cool│'
        , '├────┼──────────────────────┤'
        , '│v0.1│Testing something cool│'
        , '└────┴──────────────────────┘'
      ]; var expected = [
          '┌────────┬────────┬──────────────────────┐'
        , '│        │Header 1│Header 2              │'
        , '├────────┼────────┼──────────────────────┤'
        , '│Header 3│v0.1    │Testing something cool│'
        , '├────────┼────────┼──────────────────────┤'
        , '│Header 4│v0.1    │Testing something cool│'
        , '└────────┴────────┴──────────────────────┘'
      ]; var expected = [
          grey + '┌──────┬──────────────────┐' + off
        , grey + '│' + off + red + ' Rel  ' + off + grey + '│' + off + red + ' By               ' + off + grey + '│' + off
        , grey + '├──────┼──────────────────┤' + off
        , grey + '│' + off + ' ' + c256s + ' ' + grey + '│' + off + ' rauchg@gmail.com ' + grey + '│' + off
        , grey + '└──────┴──────────────────┘' + off
      ]; var expected = [
          '╔══════╤═════╤══════╗'
        , '║ foo  │ bar │ baz  ║'
        , '╟──────┼─────┼──────╢'
        , '║ frob │ bar │ quuz ║'
        , '╚══════╧═════╧══════╝'
      ]; var expected = [
          '┌──────┬─────┬──────┐'
        , '│ foo  │ bar │ baz  │'
        , '│ frob │ bar │ quuz │'
        , '└──────┴─────┴──────┘'
      ]; var expected = [
          '┌──────┬─────┬──────┐'
        , '│ foo  │ bar │ baz  │'
        , '│ frob │ bar │ quuz │'
        , '└──────┴─────┴──────┘'
      ]; var expected = [
          '┌──┬──┬───┐'
        , '│  │  │ 0 │'
        , '└──┴──┴───┘'
      ];
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\index.test.js: line 43, column 5-53, 5-53, 5-53

      table.toString().should.eql(expected.join("\n")); table.toString().should.eql(expected.join("\n")); table.toString().should.eql(expected.join("\n"));
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\index.test.js: line 64, column -100-6, -100-6, -100-6, -100-6, -100-6

      table.push(
          {'v0.1': 'Testing something cool'}
        , {'v0.1': 'Testing something cool'}
      ); table.push(
          [c256s, 'rauchg@gmail.com']
      ); table.push(
          ['foo', 'bar', 'baz']
        , ['frob', 'bar', 'quuz']
      ); table.push(
          ['foo', 'bar', 'baz']
        , ['frob', 'bar', 'quuz']
      ); table.push(
          ['foo', 'bar', 'baz']
        , ['frobnicate', 'bar', 'quuz']
      );
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 49, column -692-14

    this.options = utils.options({
        chars: {
            'top': '─'
          , 'top-mid': '┬'
          , 'top-left': '┌'
          , 'top-right': '┐'
          , 'bottom': '─'
          , 'bottom-mid': '┴'
          , 'bottom-left': '└'
          , 'bottom-right': '┘'
          , 'left': '│'
          , 'left-mid': '├'
          , 'mid': '─'
          , 'mid-mid': '┼'
          , 'right': '│'
          , 'right-mid': '┤'
          , 'middle': '│'
        }
      , truncate: '…'
      , colWidths: []
      , colAligns: []
      , style: {
            'padding-left': 1
          , 'padding-right': 1
          , head: ['red']
          , border: ['grey']
          , compact : false
        }
      , head: []
    }, options);
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 66, column 3-40

    var str = this.toString().split("\n");
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 87, column -234-23

    var ret = ''
      , options = this.options
      , style = options.style
      , head = options.head
      , chars = options.chars
      , truncater = options.truncate
        , colWidths = options.colWidths || new Array(this.head.length)
        , totalWidth = 0;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 114, column -695-7, -695-7, -695-7, -695-7, -695-7, -695-7

        all_rows.forEach(function(cells){
          // horizontal (arrays)
          if (typeof cells === 'object' && cells.length) {
            extractColumnWidths(cells);

          // vertical (objects)
          } else {
            var header_cell = Object.keys(cells)[0]
              , value_cell = cells[header_cell];

            colWidths[0] = Math.max(colWidths[0] || 0, get_width(header_cell) || 0);

            // cross (objects w/ array values)
            if (typeof value_cell === 'object' && value_cell.length) {
              extractColumnWidths(value_cell, 1);
            } else {
              colWidths[1] = Math.max(colWidths[1] || 0, get_width(value_cell) || 0);
            }
          }
      }); arr.forEach(function(cell, i){
        colWidths[i + offset] = Math.max(colWidths[i + offset] || 0, get_width(cell) || 0);
      }); items.forEach(function (item, i) {
        var contents = (item == null ? '' : item).toString().split("\n").reduce(function (memo, l) {
          memo.push(string(l, i));
          return memo;
        }, [])

        var height = contents.length;
        if (height > max_height) { max_height = height };

        cells.push({ contents: contents , height: height });
      }); cells.forEach(function (cell, i) {
        cell.contents.forEach(function (line, j) {
          if (!lines[j]) { lines[j] = [] };
          if (style || (first_cell_head && i === 0 && options.style.head)) {
            line = applyStyles(options.style.head, line)
          }

          lines[j].push(line);
        });

        // populate empty lines in cell
        for (var j = cell.height, l = max_height; j < l; j++) {
          if (!lines[j]) { lines[j] = [] };
          lines[j].push(string('', i));
        }
      }); lines.forEach(function (line, index) {
        if (ret.length > 0) {
          ret += "\n" + applyStyles(options.style.border, chars.left);
        }

        ret += line.join(applyStyles(options.style.border, chars.middle)) + applyStyles(options.style.border, chars.right);
      }); this.forEach(function (cells, i){
        if (!head.length && i == 0)
          lineTop();
        else {
          if (!style.compact || i<(!!head.length) ?1:0 || cells.length == 0){
            var l = line(chars.mid
                       , chars['left-mid']
                       , chars['right-mid']
                       , chars['mid-mid']);
            if (l)
              ret += l + "\n"
          }
        }

        if (cells.hasOwnProperty("length") && !cells.length) {
          return
        } else {
          ret += generateRow(cells) + "\n";
        };
      });
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 132, column -85-161

      return typeof obj == 'object' && obj && obj.width != undefined
           ? obj.width
           : ((typeof obj == 'object' && obj !== null ? utils.strlen(obj.text) : utils.strlen(obj)) + (style['padding-left'] || 0) + (style['padding-right'] || 0))
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 157, column -123-35

      var l = line(chars.top
                 , chars['top-left'] || chars.top
                 , chars['top-right'] ||  chars.top
                 , chars['top-mid']);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 239, column -225-51

      var str = String(typeof str == 'object' && str.text ? str.text : str)
        , length = utils.strlen(str)
        , width = colWidths[index]
            - (style['padding-left'] || 0)
            - (style['padding-right'] || 0)
        , align = options.colAligns[index] || 'left';
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 248, column -350-52

      return repeat(' ', style['padding-left'] || 0)
           + (length == width ? str :
               (length < width
                ? pad(str, ( width + (str.length - length) ), ' ', align == 'left' ? 'right' :
                    (align == 'middle' ? 'both' : 'left'))
                : (truncater ? truncate(str, width, truncater) : str))
             )
           + repeat(' ', style['padding-right'] || 0);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 254, column 5-47

      ret += generateRow(head, style.head) + "\n"
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 282, column -133-36

    var l = line(chars.bottom
               , chars['bottom-left'] || chars.bottom
               , chars['bottom-right'] || chars.bottom
               , chars['bottom-mid']);
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 284, column 5-13

      ret += l;
      ^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 287, column 5-27

      ret = ret.slice(0, -1);
      ^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\index.js: line 289, column 3-13

    return ret;
    ^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\utils.js: line 61, column 9-72

      if (opts[p] && opts[p].constructor && opts[p].constructor === Object) {
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\utils.js: line 63, column 7-36

        options(defaults[p], opts[p]);
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\lib\utils.js: line 81, column 3-66

    var stripped = ("" + (str != null ? str : '')).replace(code,'');
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\newlines.test.js: line 58, column 5-96

      var table = new Table({ style: {'padding-left':0, 'padding-right':0, head:[], border:[]} });
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\newlines.test.js: line 69, column -145-6, -145-6

      var expected = [
          '┌───┬──────────────┐'
        , '│v  │Testing       │'
        , '│0.1│something cool│'
        , '└───┴──────────────┘'
      ]; var expected = [
          '┌──────┬─────────┐'
        , '│      │Header   │'
        , '│      │1        │'
        , '├──────┼─────────┤'
        , '│Header│Testing  │'
        , '│2     │something│'
        , '│      │cool     │'
        , '└──────┴─────────┘'
      ];
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

# C:\Users\Sebastian Rhelfedt\Desktop\EMCS-design-of-experiments\cli-table\test\newlines.test.js: line 75, column 5-121

      var table = new Table({ head: ["", "Header\n1"], style: {'padding-left':0, 'padding-right':0, head:[], border:[]} });
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# coverage: 807/853 (94.60 %)

non-zero exit code in `coverify` command
